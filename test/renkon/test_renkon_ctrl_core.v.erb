% load "renkon.rb"

`timescale 1 ns / 1 ps

module test_renkon_ctrl_core;
`include "renkon.vh"

  /*AUTOREGINPUT*/

  /*AUTOWIRE*/

  //clock
  always
  begin
    clk = 0;
    #(STEP/2);
    clk = 1;
    #(STEP/2);
  end

  //flow
  initial
  begin
    xrst = 0;
    #(STEP);

    xrst = 1;
    req = 0;
    in_begin = 0;
    in_valid = 0;
    in_end = 0;
    img_we = 0;
    input_addr = 0;
    output_addr = 0;
    write_img = 0;
    write_result = 0;
    net_we = 0;
    net_addr = 0;
    total_out = 0;
    total_in = 0;
    img_size = 0;
    fil_size = 0;
    #(STEP);

    req = 1;
    total_out = 50;
    total_in = 20;
    img_size = 12;
    fil_size = 5;
    input_addr = 0;
    output_addr = 3000;
    #(STEP);

    req = 0;

    <%- 7.times do -%>
    #(STEP*4000);
    in_begin = 1;
    #(STEP);
    in_begin = 0;
    in_valid = 1;
    #(STEP*15);
    in_end = 1;
    #(STEP);
    in_valid = 0;
    in_end = 0;
    <%- end -%>

    while (!ack) #(STEP);
    #(STEP*5);
    $finish();
  end

  //display
  always
  begin
    #(STEP/2-1);
    $display(
      "%5d: ", $time/STEP,
      "%d ", dut0.r_state,
      "%d ", dut0.r_state_weight,
      "%d ", dut0.r_count_out,
      "%d ", dut0.r_count_in,
      "|i: ",
      "%d ", xrst,
      "%d ", req,
      "%d ", in_begin,
      "%d ", in_valid,
      "%d ", in_end,
      "%d ", input_addr,
      "%d ", output_addr,
      "%d ", write_img,
      "%d ", write_result,
      "%d ", net_addr,
      "%d ", total_out,
      "%d ", total_in,
      "%d ", img_size,
      "%d ", fil_size,
      "|o: ",
      "%d ", ack,
      "%d ", core_state,
      "%d ", out_begin,
      "%d ", out_valid,
      "%d ", out_end,
      "%d ", mem_img_we,
      "%d ", mem_img_addr,
      "%d ", write_mem_img,
      "%d ", mem_net_addr,
      "%d ", buf_pix_en,
      "%d ", first_input,
      "%d ", last_input,
      "%d ", wreg_we,
      "%d ", breg_we,
      "%d ", serial_we,
      "%d ", serial_re,
      "%d ", serial_addr,
      "%d ", w_img_size,
      "%d ", w_fil_size,
      "|r: ",
      "%d ", dut0.mem_img_we,
      "%d ", dut0.r_serial_we,
      "%d ", dut0.r_serial_re,
      "%d ", dut0.r_serial_cnt,
      "%d ", dut0.r_serial_addr,
      "|"
    );
    #(STEP/2+1);
  end

  renkon_ctrl_core dut0(/*AUTOINST*/);

endmodule

// Local Variables:
// verilog-library-directories:("." "..")
// End:
