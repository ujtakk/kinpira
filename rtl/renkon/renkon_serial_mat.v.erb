% load "renkon.rb"

module renkon_serial_mat(/*AUTOARG*/);
`include "ninjin.vh"
`include "renkon.vh"

  /*AUTOINPUT*/
  input                     clk;
  input                     xrst;
  input                     serial_we;
  input [OUTSIZE-1:0]       serial_addr;
  input [RENKON_CORELOG:0]         serial_re;
  <%- $core.times do |i| -%>
  input signed [DWIDTH-1:0] in_data<%=i%>;
  <%- end -%>

  /*AUTOOUTPUT*/
  output signed [DWIDTH-1:0] out_data;

  /*AUTOWIRE*/
  <%- $core.times do |i| -%>
  wire signed [DWIDTH-1:0] w_serial_addr<%=i%>;
  wire signed [DWIDTH-1:0] mem_data<%=i%>;
  <%- end -%>

  /*AUTOREG*/
  reg [RENKON_CORELOG:0] r_serial_re;

  <%- for i in 0...$core -%>
  assign w_serial_addr<%=i%> = serial_re == 'd0 ? serial_addr
                             : serial_re == 'd<%=i+1%> ? serial_addr
                             : 0;

  always @(posedge clk)
    if (!xrst)
      r_serial_re <= 0;
    else
      r_serial_re <= serial_re;

  /* renkon_mem_serial AUTO_TEMPLATE (
      .read_data  (mem_data<%=i%>[DWIDTH-1:0]),
      .write_data (in_data<%=i%>[DWIDTH-1:0]),
      .mem_we     (serial_we),
      .mem_addr   (w_serial_addr<%=i%>[OUTSIZE-1:0]),
  ); */
  renkon_mem_serial mem_serial<%=i%>(/*AUTOINST*/);
  <%- end -%>

  /* renkon_mux_output AUTO_TEMPLATE (
      .output_re    (r_serial_re[RENKON_CORELOG:0]),
      <%- $core.times do |i| -%>
      .read_output<%=i%>  (mem_data<%=i%>[DWIDTH-1:0]),
      <%- end -%>
      .read_output  (out_data[DWIDTH-1:0]),
  ); */
  renkon_mux_output select_out(/*AUTOINST*/);

endmodule

