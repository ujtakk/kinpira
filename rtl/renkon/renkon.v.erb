% load "renkon.rb"

// Template to ignore unnecessary output ports.
// enumerate in quoted list of verilog-regexp-words.
/* AUTO_LISP(setq verilog-auto-output-ignore-regexp
    (verilog-regexp-words `(
      ""
   ))) */

module renkon(/*AUTOARG*/);
`include "renkon.vh"

  /*AUTOINPUT*/
  input                     clk;
  input                     xrst;
  input                     req;
  input                     img_we;
  input [IMGSIZE-1:0]       input_addr;
  input [IMGSIZE-1:0]       output_addr;
  input signed [DWIDTH-1:0] write_img;
  input [CORELOG:0]         net_we;
  input [NETSIZE-1:0]       net_addr;
  input signed [DWIDTH-1:0] write_net;
  input [LWIDTH-1:0]        total_out;
  input [LWIDTH-1:0]        total_in;
  input [LWIDTH-1:0]        img_size;
  input [LWIDTH-1:0]        fil_size;
  input [LWIDTH-1:0]        pool_size;
% if $dist
  input signed [DWIDTH-1:0] read_img;
% end

  /*AUTOOUTPUT*/
  output                      ack;
% if $dist
  output                      mem_img_we;
  output [IMGSIZE-1:0]        mem_img_addr;
  output signed [DWIDTH-1:0]  write_mem_img;
% else
  output signed [DWIDTH-1:0]  read_img;
% end

  /*AUTOWIRE*/

  /*AUTOREG*/

  // AUTO_CONSTANT (DWIDTH)

  renkon_ctrl ctrl(/*AUTOINST*/);

% if !$dist
  /* renkon_mem_img AUTO_TEMPLATE (
      .read_data  (read_img[DWIDTH-1:0]),
      .write_data (write_mem_img[DWIDTH-1:0]),
      .mem_we     (mem_img_we),
      .mem_addr   (mem_img_addr[IMGSIZE-1:0]),
  ); */
  renkon_mem_img mem_img(/*AUTOINST*/);
% end

  /* renkon_linebuf AUTO_TEMPLATE (
      .buf_en     (buf_pix_en),
      .buf_input  (read_img[DWIDTH-1:0]),
      .img_size   (w_img_size[LWIDTH-1:0]),
      .fil_size   (w_fil_size[LWIDTH-1:0]),
      <%- for i in 0...$fsize -%>
      <%-   for j in 0...$fsize -%>
      .buf_output<%=i%>_<%=j%> (pixel<%=i*$fsize+j%>[DWIDTH-1:0]),
      <%-   end -%>
      <%- end -%>
  ); */
  renkon_linebuf buf_pix(/*AUTOINST*/);

  <%- for i in 0...$core -%>
  /* renkon_mem_net AUTO_TEMPLATE (
      .read_data  (read_net<%=i%>[DWIDTH-1:0]),
      .write_data (write_net[DWIDTH-1:0]),
      .mem_we     (mem_net_we[<%=i%>]),
      .mem_addr   (mem_net_addr[NETSIZE-1:0]),
  ); */
  renkon_mem_net mem_net<%=i%>(/*AUTOINST*/);

  /* renkon_core AUTO_TEMPLATE (
      .read_net     (read_net<%=i%>[DWIDTH-1:0]),
      <%- for j in 0...($fsize**2) -%>
      .pixel<%=j%>  (pixel<%=j%>[DWIDTH-1:0]),
      <%- end -%>
      .pmap         (pmap<%=i%>[DWIDTH-1:0]),
  ); */
  renkon_core core<%=i%>(/*AUTOINST*/);
  <%- end -%>

  /* renkon_serial_mat AUTO_TEMPLATE (
      <%- $core.times do |i| -%>
      .in_data<%=i%> (pmap<%=i%>[DWIDTH-1:0]),
      <%- end -%>
      .out_data (write_result[DWIDTH-1:0]),
  ); */
  renkon_serial_mat serial(/*AUTOINST*/);

endmodule
