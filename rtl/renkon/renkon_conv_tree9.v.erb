% load "renkon.rb"

module renkon_conv_tree9(/*AUTOARG*/);
`include "renkon.vh"

  /*AUTOINPUT*/
  input clk;
  input xrst;
  <%- for i in 0...9 -%>
  input signed [DWIDTH-1:0] pixel<%=i%>;
  input signed [DWIDTH-1:0] weight<%=i%>;
  <%- end -%>

  /*AUTOOUTPUT*/
  output signed [DWIDTH-1:0] fmap;

  /*AUTOWIRE*/
  <%- for i in 0...9 -%>
  wire signed[2*DWIDTH-1:0]   pro<%=i%>;
  wire signed [DWIDTH-1:0]    pro_short<%=i%>;
  <%- end -%>
  wire signed [DWIDTH-1:0]   sum0_0;
  wire signed [DWIDTH-1:0]   sum0_1;
  wire signed [DWIDTH-1:0]   sum0_2;
  wire signed [DWIDTH-1:0]   sum0_3;
  wire signed [DWIDTH-1:0]   sum1_0;
  wire signed [DWIDTH-1:0]   sum1_1;
  wire signed [DWIDTH-1:0]   sum2_0;
  wire signed [DWIDTH-1:0]   sum3_0;

  /*AUTOREG*/
  <%- for i in 0...9 -%>
  reg signed [DWIDTH-1:0]   r_pixel<%=i%>;
  reg signed [DWIDTH-1:0]   r_weight<%=i%>;
  reg signed [2*DWIDTH-1:0] r_pro<%=i%>;
  reg signed [DWIDTH-1:0]   r_pro_short<%=i%>;
  <%- end -%>
  reg signed [DWIDTH-1:0]   r_sum0_0;
  reg signed [DWIDTH-1:0]   r_sum0_1;
  reg signed [DWIDTH-1:0]   r_sum0_2;
  reg signed [DWIDTH-1:0]   r_sum0_3;
  reg signed [DWIDTH-1:0]   r_sum1_0;
  reg signed [DWIDTH-1:0]   r_sum1_1;
  reg signed [DWIDTH-1:0]   r_sum2_0;
  reg signed [DWIDTH-1:0]   r_sum3_0;
  reg signed[DWIDTH-1:0]    r_fmap;

  <%- for i in 0...9 -%>
  assign pro<%=i%> = r_pixel<%=i%> * r_weight<%=i%>;
  assign pro_short<%=i%> = round(r_pro<%=i%>);
  <%- end -%>

  assign sum0_0 = r_pro_short0 + r_pro_short1;
  assign sum0_1 = r_pro_short2 + r_pro_short3;
  assign sum0_2 = r_pro_short4 + r_pro_short5;
  assign sum0_3 = r_pro_short6 + r_pro_short7;
  assign sum1_0 = sum0_0 + sum0_1;
  assign sum1_1 = sum0_2 + sum0_3;
  assign sum2_0 = sum1_0 + sum1_1;
  assign sum3_0 = sum2_0 + pro_short8;

  assign fmap = r_fmap;

  <%- for i in 0...9 -%>
  always @(posedge clk)
    if(!xrst)
      r_pixel<%=i%> <= 0;
    else
      r_pixel<%=i%> <= pixel<%=i%>;

  always @(posedge clk)
    if(!xrst)
      r_weight<%=i%> <= 0;
    else
      r_weight<%=i%> <= weight<%=i%>;

  always @(posedge clk)
    r_pro<%=i%> <= pro<%=i%>;
  always @(posedge clk)
    r_pro_short<%=i%> <= pro_short<%=i%>;
  <%- end -%>

  always @(posedge clk)
    if(!xrst)
      r_fmap <= 0;
    else
      r_fmap <= sum3_0;

////////////////////////////////////////////////////////////
//  Function
////////////////////////////////////////////////////////////

  function signed [DWIDTH-1:0] round;
    input signed [2*DWIDTH-1:0] data;
    if (data[2*DWIDTH-DWIDTH/2-2] == 1 && data[DWIDTH/2-1:0] == 0)
      round = $signed({
                data[2*DWIDTH-DWIDTH/2-2],
                data[2*DWIDTH-DWIDTH/2-2:DWIDTH/2] - 1'b1
              });
    else
      round = $signed({
                data[2*DWIDTH-DWIDTH/2-2],
                data[2*DWIDTH-DWIDTH/2-2:DWIDTH/2]
              });
  endfunction

endmodule
