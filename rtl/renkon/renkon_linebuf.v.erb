% load "renkon.rb"

/* AUTO_LISP(setq verilog-auto-output-ignore-regexp
   (verilog-regexp-words `(
     <%- for i in 0..$max_line -%>
     "read_mem<%=i%>"
     <%- end -%>
   ))) */

module renkon_linebuf(/*AUTOARG*/);
`include "renkon.vh"

  parameter _BUFSIZE = <%= ( Math.log($max_size) / Math.log(2) ).to_i %>;
  parameter _BUFLINE = <%= ( Math.log($max_line) / Math.log(2) ).to_i %>;

  parameter S_WAIT   = 'd0;
  parameter S_CHARGE = 'd1;
  parameter S_ACTIVE = 'd2;

  /*AUTOINPUT*/
  input xrst;
  input buf_en;
  input [LWIDTH-1:0] img_size;
  input [LWIDTH-1:0] fil_size;
  input signed [DWIDTH-1:0] buf_input;

  /*AUTOOUTPUT*/
  <%- for i in 0...$max_line -%>
  <%-   for j in 0...$max_line -%>
  output signed [DWIDTH-1:0] buf_output<%=i%>_<%=j%>;
  <%-   end -%>
  <%- end -%>

  /*AUTOWIRE*/
  wire                        s_charge_end;
  wire                        s_active_end;
  wire [<%=$max_line+1%>-1:0] mem_linebuf_we;
  wire [_BUFSIZE-1:0]         mem_linebuf_addr;
  <%- for i in 0..$max_line -%>
  wire signed [DWIDTH-1:0]  read_mem<%=i%>;
  <%- end -%>

  /*AUTOREG*/
  reg [2-1:0]             r_state;
  reg [_BUFLINE:0]        r_select;
  reg [_BUFLINE-1:0]      r_mem_count;
  reg [_BUFSIZE-1:0]      r_addr_count;
  reg [_BUFSIZE-1:0]      r_line_count;
  reg signed [DWIDTH-1:0] r_buf_input;
  <%- for i in 0...$max_line -%>
  <%-   for j in 0...$max_line -%>
  reg signed [DWIDTH-1:0] r_pixel<%=i%>_<%=j%>;
  <%-   end -%>
  <%- end -%>

  assign mem_linebuf_addr = r_addr_count;

  assign mem_linebuf_we = (r_state == S_CHARGE || r_state == S_ACTIVE)
                        ? (1 << r_mem_count)
                        : 1'b0;

  <%- for i in 0...$max_line -%>
  <%-   for j in 0...$max_line -%>
  assign buf_output<%=i%>_<%=j%> = r_pixel<%=i%>_<%=j%>;
  <%-   end -%>
  <%- end -%>

  always @(posedge clk or negedge xrst)
    if (!xrst)
      r_state <= S_WAIT;
    else
      case (r_state)
        S_WAIT:
          if (buf_en)
            r_state <= S_CHARGE;
        S_CHARGE:
          if (s_charge_end)
            r_state <= S_ACTIVE;
        S_ACTIVE:
          if (s_active_end)
            r_state <= S_WAIT;
        default:
          r_state <= S_WAIT;
      endcase

  assign s_charge_end = r_mem_count == fil_size - 1
                        && r_addr_count == img_size - 1;

  assign s_active_end = r_line_count == img_size
                        && r_addr_count == img_size - 1;

  always @(posedge clk or negedge xrst)
    if (!xrst)
      r_buf_input <= 0;
    else
      r_buf_input <= buf_input;

  always @(posedge clk or negedge xrst)
    if (!xrst)
      r_addr_count <= 0;
    else if (r_state == S_WAIT)
      r_addr_count <= 0;
    else if (r_state == S_CHARGE || r_state == S_ACTIVE)
      if (r_addr_count == img_size - 1)
        r_addr_count <= 0;
      else
        r_addr_count <= r_addr_count + 1;

  always @(posedge clk or negedge xrst)
    if (!xrst)
      r_mem_count <= 0;
    else if  (r_state == S_WAIT)
      r_mem_count <= 0;
    else if (r_state == S_CHARGE || r_state == S_ACTIVE)
      if ((r_line_count == img_size || r_mem_count == <%=$max_line%>)
            && r_addr_count == img_size - 1)
        r_mem_count <= 0;
      else if (r_addr_count == img_size - 1)
        r_mem_count <= r_mem_count + 1;

  always @(posedge clk or negedge xrst)
    if (!xrst)
      r_line_count <= 0;
    else if  (r_state == S_WAIT)
      r_line_count <= 0;
    else if (r_state == S_CHARGE || r_state == S_ACTIVE)
      if (r_line_count == img_size && r_addr_count == img_size - 1)
        r_line_count <= 0;
      else if (r_addr_count == img_size - 1)
        r_line_count <= r_line_count + 1;

  always @(posedge clk)
    if (!xrst)
      r_select <= 0;
    else if (r_state == S_WAIT)
      r_select <= 0;
    else if (r_state == S_ACTIVE)
      if (r_mem_count == fil_size && r_addr_count == 0)
        r_select <= 1;
      else if (r_addr_count == 0)
        r_select <= r_select+1;

  <%- for i in 0...$max_line -%>
  <%-   for j in 0...$max_line -%>
  always @(posedge clk or negedge xrst)
    if (!xrst)
      r_pixel<%=i%>_<%=j%> <= 0;
    <%- if j == $max_line-1 -%>
    else
      case (r_select)
        0:    r_pixel<%=i%>_<%=j%> <= 0;
        <%- for k in 0..$max_line -%>
        <%=k+1%>:    r_pixel<%=i%>_<%=j%> <= read_mem<%=(i + k) % ($max_line + 1)%>;
        <%- end -%>
        default: r_pixel<%=i%>_<%=j%> <= 0;
      endcase
    <%- else -%>
    else
      r_pixel<%=i%>_<%=j%> <= r_pixel<%=i%>_<%=j+1%>;
    <%- end -%>

  <%-   end -%>
  <%- end -%>

  <%- for i in 0..$max_line -%>
  /* renkon_mem_linebuf AUTO_TEMPLATE (
      .mem_rdata  (read_mem<%=i%>[DWIDTH-1:0]),
      .mem_wdata  (r_buf_input[DWIDTH-1:0]),
      .mem_we     (mem_linebuf_we[<%=i%>]),
      .mem_addr   (mem_linebuf_addr[_BUFSIZE-1:0]),
  ); */
  renkon_mem_linebuf buff<%=i%>(/*AUTOINST*/);

  <%- end -%>

endmodule
