# -*- makefile -*-

###
# This is common Makefile for ERB descripted Verilog sources.
#
# Include this file and Makefile.dep from normal Makefile.
###



###
# below is the template for dep.in script.
# write the definition of this macro on Makefile that includes VERBMakefile
###

#-----------------------------------------------------------
#define DEP_IN
### -*- text -*-
### ignore list
#
#ignore_file {
#}
#
#ignore_com {
#}
#endef
#export DEP_IN
#-----------------------------------------------------------

############################################################
# Attributes Definition
############################################################

ifndef SIMULATOR
SIMULATOR=vsim
# SIMULATOR=xsim
# SIMULATOR=vcs
# SIMULATOR=iverilog
endif

ifndef VERBOSE
VERBOSE = 0
endif

ifndef DIST
DIST = dist
endif

ifeq ($(VERBOSE),1)
  E = @true
  Q =
else
  E = @
  Q = @
endif

ERUBY = erb -T - $<
VMODE = cp $< $@ ; chmod 644 $@ ; \
        emacs --batch --no-site-file $@ \
        --eval '(setq make-backup-files nil)' \
        --eval '(setq large-file-warning-threshold nil)' \
        -l verilog-mode -f verilog-auto -f save-buffer

V_TARGET    = $(shell echo $* | tac -s/ | head -1 | cut -d. -f1)
ifeq ($(SIMULATOR),xsim)
  XVLOG_OPT = -i $(INCLUDE) --verbose 2
  COMPILE   = xvlog $(XVLOG_OPT) $<
  XELAB_OPT = -relax -debug typical
  ELABORATE = xelab $(XELAB_OPT) $(V_TARGET) -s $(V_TARGET)_sim
  XSIM_OPT  = -R #$(XVLOG_OPT)
  SIMULATE  = xsim $(V_TARGET)_sim $(XSIM_OPT)
else
ifeq ($(SIMULATOR),vsim)
  VLOG_OPT  = +incdir+$(INCLUDE) -lint
  COMPILE   = (test -d work || vlib work) \
           && vlog $(VLOG_OPT) $<
  VSIM_OPT  = -c -do 'run -all; quit' # $(VLOG_OPT)
  SIMULATE  = vsim $(V_TARGET) $(VSIM_OPT) | sed 's/^\# //'
else
ifeq ($(SIMULATOR),vcs)
  VCS_OPT   = -full64 +incdir+$(INCLUDE) -R
  COMPILE   = true $<
  SIMULATE  = vcs $(VCS_OPT) -o $(V_TARGET).out $*.sv $(SOURCES)
else
ifeq ($(SIMULATOR),iverilog)
  IVER_OPT  = -g2001 -I $(INCLUDE)
  COMPILE   = true $<
  SIMULATE  = iverilog $(IVER_OPT) -o $(V_TARGET).out $(VFILES) \
           && time ./$(V_TARGET).out
endif
endif
endif
endif

############################################################
# General Rules
############################################################

.SUFFIXES: .v .v.in .v.erb .log .vh .vh.erb .com .dot .png

.v.erb.v.in:
	$(E) echo "  ERUBY (.v.erb)    $<"
ifeq ($(VERBOSE),1)
	$(Q) $(ERUBY) 2>&1 | tee $@
else
	$(Q) $(ERUBY) > $@ 2>&1
endif

.vh.erb.vh:
	$(E) echo "  ERUBY (.vh.erb)   $<"
ifeq ($(VERBOSE),1)
	$(Q) $(ERUBY) 2>&1 | tee $@
else
	$(Q) $(ERUBY) > $@ 2>&1
endif

.v.in.v:
	$(E) echo "  VMODE (.v.in) (B) $<"
ifeq ($(VERBOSE),1)
	$(Q) $(VMODE) 2>&1 | tee $@.log
else
	$(Q) $(VMODE) > $@.log 2>&1
endif

.v.com:
	$(E) echo "  COMPILE (.v)      $<"
ifeq ($(VERBOSE),1)
	$(Q) $(COMPILE) 2>&1 | tee $@
else
	$(Q) $(COMPILE) > $@ 2>&1
endif

.com.log:
ifeq ($(SIMULATOR),xsim)
	$(E) echo "  ELABORATE         $(V_TARGET)"
  ifeq ($(VERBOSE),1)
		$(Q) $(ELABORATE) 2>&1 | tee $@
  else
		$(Q) $(ELABORATE) > $@ 2>&1
  endif
	$(E) echo "  SIMULATE          $(V_TARGET)"
  ifeq ($(VERBOSE),1)
		$(Q) $(SIMULATE) 2>&1 | tee -a $@
  else
		$(Q) $(SIMULATE) >> $@ 2>&1
  endif
else
	$(E) echo "  SIMULATE          $(V_TARGET)"
  ifeq ($(VERBOSE),1)
		$(Q) $(SIMULATE) 2>&1 | tee $@
  else
		$(Q) $(SIMULATE) > $@ 2>&1
  endif
endif

.v.dot:
	./dep.rb --dot $< > $@
.dot.png:
	dot -Tpng $< > $@
.dot.svg:
	dot -Tsvg $< > $@

Makefile.dep:
	cat Makefile | grep -v Makefile.dep | $(MAKE) -f - dep.rb dep.in
	./dep.rb $(shell echo $(TARGET) | cut -d. -f1) > $@ || rm -f $@

dep.in:
	echo "$$DEP_IN" > dep.in

dep.rb:
	echo "$$DEP_RB" > dep.rb
	chmod 744 dep.rb

VERBFILES  = $(wildcard *.v.erb)  $(wildcard $(TEST_DIR)/*.v.erb)
VHERBFILES = $(wildcard *.vh.erb) $(wildcard $(TEST_DIR)/*.vh.erb)
VINFILES   = $(wildcard *.v.in)   $(wildcard $(TEST_DIR)/*.v.in)

clean-common:
	rm -f *~ $(TEST_DIR)/*~
	rm -f *.com $(TEST_DIR)/*.com
	rm -f *.log $(TEST_DIR)/*.log
	rm -f Makefile.dep
	rm -f dep.rb dep.in

	### vsim
	rm -f vsim.wlf transcript
	rm -f vish_stacktrace.vstf
	rm -rf work csrc

	### xsim
	rm -rf xsim.dir
	rm -f *.jou *.pb
	rm -f *.wdb

	### vcs
	rm -f default.cfg vcdplus.vpd vcs.key
	rm -rf *.daidir

	### iverilog
	rm -f *.out $(TEST_DIR)/*.out

	rm -f $(VERBFILES:.v.erb=.v)
	rm -f $(VERBFILES:.v.erb=.v.in)
	rm -f $(VHERBFILES:.vh.erb=.vh)
	rm -f $(VINFILES:.v.in=.v)

	rm -f $(LINK_FILES)

$(LINK_FILES):
	(cd $(LINK_DIR)/ ; $(MAKE) $@)
	ln -sf $(LINK_DIR)/$@ .

############################################################
# dist target
############################################################
dist:
	$(MAKE) $(VFILES) $(VHFILES)
	mkdir -p $(DIST)
	rsync -L -avz $(VFILES) $(VHFILES) $(DIST)

############################################################
# ruby macro definition
############################################################
define DEP_RB
#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'pp'

class VFile
  attr_reader(:filename)
  attr_reader(:module_name)

  class << self
    def read_ignore_list(file)
      @@ignore_file = []
      @@ignore_com = []
      # data_hash = {}
      data = open(file).read
      data = data.gsub(/#.*$$/, "")    # ignore comment
                 .gsub(/\s+/im, " ")  # gather spaces to single space
      data.scan(/(\S+)\s*\{(.*?)\}/).each do |i|
        type, d = i
        d = d.strip.split(/\s+/)
        case type
        when "ignore_file"
          @@ignore_file = d
        when "ignore_com"
          @@ignore_com = d.map{|j| "#{j}.com"}
        else
          raise
        end
      end
    end
  end

  def initialize(module_name)
    @module_name = module_name
    @filename    = module_name + ".v"
    @filename_body, @filename_ext = @filename.scan(/^([^.]*)\.(.*)$$/)[0]
    @dep = nil
  end

  def have_v_in
    if have_v_erb
      true
    else
      File.exist?(v_in)
    end
  end

  def have_v_erb
    File.exist?(v_erb)
  end

  def v_in;  @filename_body + ".v.in"  end
  def v_erb; @filename_body + ".v.erb" end
  def com;   @filename_body + ".com"   end

  def walk(files)
    r = ""
    files << @filename

    # append dependency for *.v
    if have_v_in and not dep.empty?
      r += <<~EOF
        #{@filename}: #{dep*" "}
      EOF
    end

    # append dependency for *.v.in
    if have_v_erb
      r += <<~EOF
        #{v_in}: #{v_erb}
      EOF
      files << v_in
    end

    # append dependency for
    if not @@ignore_com.include?(com) and
       not (c = com_dep).empty? and
       not com =~ /</
    then
      r += <<~EOF
        #{com}: #{c*" "}
      EOF
      files << com
      c.each do |i|
        if i =~ /\.vh$$/
          files << i
        end
      end
    end

    submodules.each do |i|
      if not files.include?(i + ".v")
        next if @@ignore_file.include?(i) or i =~ /</
        files << i + ".v"
        r += self.class.new(i).walk(files)
      end
    end

    return r
  end

  def com_dep
    r = includes + submodules.map{|i| self.class.new(i).com}
    r.delete_if{|i| @@ignore_com.include?(i) or i =~ /</}
    return r
  end

  def dep
    return @dep if @dep != nil
    @dep = []
#    @dep<< v_in if have_v_in
    s = submodules
    @dep += s.map{|i| i + ".v"}
    @dep.delete_if{|i| i =~ /</}
    @dep
  end

  def data
    return @data if @data != nil
    if have_v_erb
      @data = open(v_erb).read
    elsif have_v_in
      @data = open(v_in).read
    else
      if File.exist?(filename)
        @data = open(filename).read
      else
        @data = ""
      end
    end

    return @data
  end

  def _submodules(str)
    v_files = []
    data0 = str.scan(/([a-zA-Z_0-9]+)\s+\S+\s*\((?:\s*\.\S+\s*\([^\)]*\)\s*,{0,1}){0,}(?:\s*\/\*AUTOINST\*\/\s*){1}\);/).map do |i|
      i[0]
    end
    v_files += data0
    data1 = str.scan(/([a-zA-Z_0-9]+)\s+\S+\s*\((?:\s*\.\S+\s*\([^\)]*\)\s*,{0,1}){1,}\);/).map do |i|
      i[0]
    end
    v_files += data1
    return v_files.uniq
  end

  def submodules
    v_files = _submodules(data)
    sdata = data.gsub(/\/\/.*$$/, "")      # ignore 1-line comments
                .gsub(/\/\*.*?\*\//, "")  # ignore multi-line comments
                .gsub(/\s+/, " ")         # condense spaces
    v_files += _submodules(sdata)
    r = v_files
    r = r.uniq.sort
    return r
  end

  def includes
    v_files = data.scan(/^\s*`include\s+"([^"]*)"\s*$$/).map do |i|
      [i[0]] + VHFile.new(i[0]).includes
    end
    return v_files.flatten.uniq
  end

  def to_dot_sub
    r = []
    r << "node_#{@filename_body} [label=\"#{@filename_body}\"];"
    r += submodules.map{|i|
      next if i =~ /</

      k = self.class.new(i).to_dot_sub
      r << "node_#{@filename_body}->node_#{i};"
      k
    }
    r.flatten * "\\n"
  end

  def to_dot
    <<~EOF
      digraph sample {
      #{to_dot_sub}
      }
    EOF
  end
end

class VHFile < VFile
  def initialize(filename)
    @filename = filename
    @filename_body, @filename_ext = @filename.scan(/^([^.]*)\.(.*)$$/)[0]
    @dep = nil
  end

  def vh_erb; @filename_body + ".vh.erb" end

  def have_vh_erb
    File.exist?(vh_erb)
  end

  def data
    return @data if @data != nil
    if have_vh_erb
      @data = open(vh_erb).read
    else
      if File.exist?(filename)
        @data = open(filename).read
      else
        @data = ""
      end
    end

    return @data
  end
end

class VFiles < Array
  def to_s
    f = self.uniq
    f = purge(f)
    f = f.sort * " \\\\\\n\\t" + "\\n"
    "#{name}= \\\\\\n\\t#{f}\\n"
  end

  def name
    "VFILES"
  end

  def purge(f)
    f.delete_if{|i| not i =~ /\.v$$/}
    f.delete_if{|i| i =~ /^alt/}
  end
end

class VHFiles < VFiles
  def name
    "VHFILES"
  end
  def purge(f)
    f.delete_if{|i| not i =~ /\.vh$$/}
    f.delete_if{|i| i =~ /^alt/}
  end
end

############################################################
# Main routine
############################################################

options = OpenStruct.new
options.mode = :make
opts = OptionParser.new do |opt|
  opt.on("--dc","design compiler readfile script") do |i|
    options.mode = :dc
  end
  opt.on("--dot","generate dot file") do |i|
    options.mode = :dot
  end
  opt.on("--make","generate Makefile (default)") do |i|
    options.mode = :make
  end
  opt.on_tail("-h", "--help", "Show this message") do
    puts opt
    exit
  end
end
opts.parse!(ARGV)

VFile.read_ignore_list("dep.in")

files_all = []
top_vfiles = ARGV.map{|top| VFile.new(top)}

top_vfiles_s = top_vfiles.map{|t|
  files = []
  r = t.walk(files)
  files_all += files

  f = files.uniq
  f.delete_if{|i| not i =~ /\.v$$/}
  f.delete_if{|i| i =~ /^alt/}

  k = t.module_name

  r
}

files = files_all

if options.mode == :make
  print "## -*- makefile -*-\\n"
  print VFiles.new(files.dup).to_s
  print VHFiles.new(files.dup).to_s
  print top_vfiles_s * "\\n"
elsif options.mode == :dc
  files.delete_if{|i| not i =~ /\.v$$/}
  print files.uniq.map{|i| "read_file -format verilog #{i}\\n"}*""
elsif options.mode == :dot
  top_vfiles.each do |t|
    print t.to_dot
  end
end
endef
export DEP_RB
