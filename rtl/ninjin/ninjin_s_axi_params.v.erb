% load "ninjin.rb"

`timescale 1 ns / 1 ps

module ninjin_s_axi_params #
  (
    // Users to add parameters here

    // User parameters ends
    // Do not modify the parameters beyond this line
    parameter C_S_AXI_DATA_WIDTH  = 32, // Width of S_AXI data bus
    parameter C_S_AXI_ADDR_WIDTH  = 7   // Width of S_AXI address bus
  )
  (
    // Users to add ports here

% $port.times do |i|
%   if i < $port/2 then
    output [C_S_AXI_DATA_WIDTH-1:0] port<%=i%>,
%   else
    input  [C_S_AXI_DATA_WIDTH-1:0] port<%=i%>,
%   end
% end

    // User ports ends
    // Do not modify the ports beyond this line
    input                             S_AXI_ACLK,     // Global Clock Signal
    input                             S_AXI_ARESETN,  // Global Reset Signal. This Signal is Active LOW
    input  [C_S_AXI_ADDR_WIDTH-1:0]   S_AXI_AWADDR,   // Write address (issued by master, acceped by Slave)
    input  [2:0] S_AXI_AWPROT, // Write channel Protection type. This signal indicates the privilege and security level of the transaction, and whether the transaction is a data access or an instruction access.
    input                             S_AXI_AWVALID,  // Write address valid. This signal indicates that the master signaling valid write address and control information.
    input  [C_S_AXI_DATA_WIDTH-1:0]   S_AXI_WDATA,    // Write data (issued by master, acceped by Slave)
    input  [C_S_AXI_DATA_WIDTH/8-1:0] S_AXI_WSTRB,    // Write strobes. This signal indicates which byte lanes hold valid data. There is one write strobe bit for each eight bits of the write data bus.
    input                             S_AXI_WVALID,   // Write valid. This signal indicates that valid write data and strobes are available.
    input                             S_AXI_BREADY,   // Respready. This signal indicates that the master can accept a write response.
    input  [C_S_AXI_ADDR_WIDTH-1:0]   S_AXI_ARADDR,   // Read address (issued by master, acceped by Slave)
    input  [2:0]                      S_AXI_ARPROT,   // Protection type. This signal indicates the privilege and security level of the transaction, and whether the transaction is a data access or an instruction access.
    input                             S_AXI_ARVALID,  // Read address valid. This signal indicates that the channel is signaling valid read address and control information.
    input                             S_AXI_RREADY,   // Read ready. This signal indicates that the master can accept the read data and response information.

    output                            S_AXI_AWREADY,  // Write address ready. This signal indicates that the slave is ready to accept an address and associated control signals.
    output                            S_AXI_WREADY,   // Write ready. This signal indicates that the slave can accept the write data.
    output [1:0]                      S_AXI_BRESP,    // Write response. This signal indicates the status of the write transaction.
    output                            S_AXI_BVALID,   // Write response valid. This signal indicates that the channel is signaling a valid write response.
    output                            S_AXI_ARREADY,  // Read address ready. This signal indicates that the slave is ready to accept an address and associated control signals.
    output [C_S_AXI_DATA_WIDTH-1:0]   S_AXI_RDATA,    // Read data (issued by slave)
    output [1:0]                      S_AXI_RRESP,    // Read response. This signal indicates the status of the read transfer.
    output                            S_AXI_RVALID    // Read valid. This signal indicates that the channel is signaling the required read data.
  );

  // AXI4LITE signals
  reg [C_S_AXI_ADDR_WIDTH-1:0]  axi_awaddr;
  reg                           axi_awready;
  reg                           axi_wready;
  reg [1:0]                     axi_bresp;
  reg                           axi_bvalid;
  reg [C_S_AXI_ADDR_WIDTH-1:0]  axi_araddr;
  reg                           axi_arready;
  reg [C_S_AXI_DATA_WIDTH-1:0]  axi_rdata;
  reg [1:0]                     axi_rresp;
  reg                           axi_rvalid;

  // Example-specific design signals
  //----------------------------------------------
  //-- Signals for user logic register space example
  //------------------------------------------------
  /*
   * local parameter for addressing 32 bit / 64 bit C_S_AXI_DATA_WIDTH
   * ADDR_LSB is used for addressing 32/64 bit registers/memories
   * ADDR_LSB = 2 for 32 bits (n downto 2)
   * ADDR_LSB = 3 for 64 bits (n downto 3)
   */
  localparam ADDR_LSB           = C_S_AXI_DATA_WIDTH/32 + 1;
  localparam OPT_MEM_ADDR_BITS  = 4;

  //-- Number of Slave Registers <%=$port%>
  wire   slv_reg_rden;
  wire   slv_reg_wren;
% $port.times do |i|
  reg [C_S_AXI_DATA_WIDTH-1:0]  slv_reg<%=i%>;
% end
  reg [C_S_AXI_DATA_WIDTH-1:0]   reg_data_out;
  integer  byte_index;

  // I/O Connections assignments
  assign S_AXI_AWREADY  = axi_awready;
  assign S_AXI_WREADY   = axi_wready;
  assign S_AXI_BRESP    = axi_bresp;
  assign S_AXI_BVALID   = axi_bvalid;
  assign S_AXI_ARREADY  = axi_arready;
  assign S_AXI_RDATA    = axi_rdata;
  assign S_AXI_RRESP    = axi_rresp;
  assign S_AXI_RVALID   = axi_rvalid;

  /*
   * axi_awready is asserted for one S_AXI_ACLK clock cycle when both
   * S_AXI_AWVALID and S_AXI_WVALID are asserted. axi_awready is
   * de-asserted when reset is low.
   */

 // Implement axi_awready generation
  always @(posedge S_AXI_ACLK)
    if (S_AXI_ARESETN == 1'b0)
      axi_awready <= 1'b0;
    else begin
      // slave is ready to accept write address when
      // there is a valid write address and write data
      // on the write address and data bus. This design
      // expects no outstanding transactions.
      if (~axi_awready && S_AXI_AWVALID && S_AXI_WVALID)
        axi_awready <= 1'b1;
      else
        axi_awready <= 1'b0;
    end

  /*
   * This process is used to latch the address when both
   * S_AXI_AWVALID and S_AXI_WVALID are valid.
   */

  // Implement axi_awaddr latching
  always @(posedge S_AXI_ACLK)
    if (S_AXI_ARESETN == 1'b0)
      axi_awaddr <= 0;
    else begin
      if (~axi_awready && S_AXI_AWVALID && S_AXI_WVALID)
        // Write Address latching
        axi_awaddr <= S_AXI_AWADDR;
    end

  /*
   * axi_wready is asserted for one S_AXI_ACLK clock cycle when both
   * S_AXI_AWVALID and S_AXI_WVALID are asserted. axi_wready is
   * de-asserted when reset is low.
   */

  // Implement axi_wready generation
  always @(posedge S_AXI_ACLK)
    if (S_AXI_ARESETN == 1'b0)
      axi_wready <= 1'b0;
    else begin
      // slave is ready to accept write data when
      // there is a valid write address and write data
      // on the write address and data bus. This design
      // expects no outstanding transactions.
      if (~axi_wready && S_AXI_WVALID && S_AXI_AWVALID)
        axi_wready <= 1'b1;
      else
        axi_wready <= 1'b0;
    end

  /*
   * The write data is accepted and written to memory mapped registers when
   * axi_awready, S_AXI_WVALID, axi_wready and S_AXI_WVALID are asserted. Write strobes are used to
   * select byte enables of slave registers while writing.
   * These registers are cleared when reset (active low) is applied.
   * Slave register write enable is asserted when valid address and data are available
   * and the slave is ready to accept the write address and write data.
   */
  // Implement memory mapped register select and write logic generation
  assign slv_reg_wren = axi_wready && S_AXI_WVALID && axi_awready && S_AXI_AWVALID;

  always @(posedge S_AXI_ACLK)
    if (S_AXI_ARESETN == 1'b0) begin
% $port.times do |i|
      slv_reg<%=i%> <= 0;
% end
    end
    else begin
      if (slv_reg_wren)
        case (axi_awaddr[ADDR_LSB+OPT_MEM_ADDR_BITS:ADDR_LSB])
% $port.times do |i|
          5'h<%=sprintf("%02X", i)%>:
            for (byte_index = 0; byte_index <= C_S_AXI_DATA_WIDTH/8-1; byte_index = byte_index+1)
              // Respective byte enables are asserted as per write strobes
              // Slave register <%=i%>
              if (S_AXI_WSTRB[byte_index] == 1)
                slv_reg<%=i%>[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
% end
          default : begin
% $port.times do |i|
            slv_reg<%=i%> <= slv_reg<%=i%>;
% end
          end
        endcase
      else begin
% for i in 0...$port
%   unless i < $port/2 then
        slv_reg<%=i%> <= port<%=i%>;
%   end
% end
      end
    end

  /*
   * The write response and response valid signals are asserted by the slave
   * when axi_wready, S_AXI_WVALID, axi_wready and S_AXI_WVALID are asserted.
   * This marks the acceptance of address and indicates the status of
   * write transaction.
   */

  // Implement write response logic generation
  always @(posedge S_AXI_ACLK)
    if (S_AXI_ARESETN == 1'b0) begin
      axi_bvalid  <= 0;
      axi_bresp   <= 2'b0;
    end
    else begin
      if (axi_awready && S_AXI_AWVALID && ~axi_bvalid && axi_wready && S_AXI_WVALID) begin
        // indicates a valid write response is available
        axi_bvalid <= 1'b1;
        axi_bresp  <= 2'b0; // 'OKAY' response
      end                   // work error responses in future
      else if (S_AXI_BREADY && axi_bvalid)
        //check if bready is asserted while bvalid is high)
        //(there is a possibility that bready is always asserted high)
        axi_bvalid <= 1'b0;
    end

  /*
   * axi_arready is asserted for one S_AXI_ACLK clock cycle when
   * S_AXI_ARVALID is asserted. axi_awready is
   * de-asserted when reset (active low) is asserted.
   * The read address is also latched when S_AXI_ARVALID is
   * asserted. axi_araddr is reset to zero on reset assertion.
   */

  // Implement axi_arready generation
  always @(posedge S_AXI_ACLK)
    if (S_AXI_ARESETN == 1'b0) begin
      axi_arready <= 1'b0;
      axi_araddr  <= 32'b0;
    end
    else begin
      if (~axi_arready && S_AXI_ARVALID) begin
        // indicates that the slave has acceped the valid read address
        axi_arready <= 1'b1;
        // Read address latching
        axi_araddr  <= S_AXI_ARADDR;
      end
      else
        axi_arready <= 1'b0;
    end

  /*
   * axi_rvalid is asserted for one S_AXI_ACLK clock cycle when both
   * S_AXI_ARVALID and axi_arready are asserted. The slave registers
   * data are available on the axi_rdata bus at this instance. The
   * assertion of axi_rvalid marks the validity of read data on the
   * bus and axi_rresp indicates the status of read transaction.axi_rvalid
   * is deasserted on reset (active low). axi_rresp and axi_rdata are
   * cleared to zero on reset (active low).
   */

  // Implement axi_arvalid generation
  always @(posedge S_AXI_ACLK)
    if (S_AXI_ARESETN == 1'b0) begin
      axi_rvalid <= 0;
      axi_rresp  <= 0;
    end
    else begin
      if (axi_arready && S_AXI_ARVALID && ~axi_rvalid) begin
        // Valid read data is available at the read data bus
        axi_rvalid <= 1'b1;
        axi_rresp  <= 2'b0; // 'OKAY' response
      end
      else if (axi_rvalid && S_AXI_RREADY)
        // Read data is accepted by the master
        axi_rvalid <= 1'b0;
    end

  /*
   * Slave register read enable is asserted when valid address is available
   * and the slave is ready to accept the read address.
   */

  // Implement memory mapped register select and read logic generation
  assign slv_reg_rden = axi_arready & S_AXI_ARVALID & ~axi_rvalid;
  always @(*)
    // Address decoding for reading registers
    case ( axi_araddr[ADDR_LSB+OPT_MEM_ADDR_BITS:ADDR_LSB] )
% $port.times do |i|
      5'h<%=sprintf("%02X", i)%>   : reg_data_out <= slv_reg<%=i%>;
% end
      default : reg_data_out <= 0;
    endcase

  // Output register or memory read data
  always @(posedge S_AXI_ACLK)
    if (S_AXI_ARESETN == 1'b0)
      axi_rdata  <= 0;
    else begin
      // When there is a valid read address (S_AXI_ARVALID) with
      // acceptance of read address by the slave (axi_arready),
      // output the read dada
      if (slv_reg_rden)
        axi_rdata <= reg_data_out;     // register read data
    end

  // Add user logic here

% for i in 0...$port
%   if i < $port/2 then
  assign port<%=i%> = slv_reg<%=i%>[C_S_AXI_DATA_WIDTH-1:0];
%   end
% end

  // User logic ends

endmodule
