% load "renkon.rb"

`timescale 1 ns / 1 ps

module test_renkon_mem_feat;
`include "ninjin.vh"
`include "renkon.vh"

    /*AUTOREGINPUT*/

    /*AUTOWIRE*/

    //clock
    always
    begin
        clk = 0;
        #(STEP/2);
        clk = 1;
        #(STEP/2);
    end

    //initial
    //begin
    //    #(STEP);
    //    mem_we1 = 1;
    //    mem_we2 = 0;
    //    write_data2 = 0;
    //    <%- for i in 0...32 -%>
    //    mem_addr1 = <%=i%>;
    //    <%- if i == 31 -%>
    //    mem_addr2 = 0;
    //    <%- else -%>
    //    mem_addr2 = <%=i+1%>;
    //    <%- end -%>
    //    write_data1 = <%=2*i%>;
    //    #(STEP);
    //    <%- end -%>
    //    <%- for i in 0...32 -%>
    //    mem_addr1 = <%=i%>;
    //    <%- if i == 31 -%>
    //    mem_addr2 = 0;
    //    <%- else -%>
    //    mem_addr2 = <%=i+1%>;
    //    <%- end -%>
    //    write_data1 = <%=4*i%>;
    //    #(STEP);
    //    <%- end -%>
    //    mem_we1 = 0;
    //    mem_addr1 = 1;
    //    write_data1 = 0;
    //    mem_faccum.mem[100] = 334;
    //    #(STEP);
    //    mem_addr1 = 10;
    //    mem_addr2 = 5;
    //    #(STEP*2);
    //    mem_addr1 = 31;
    //    mem_addr2 = 10;
    //    #(STEP*2);
    //    mem_addr1 = 100;
    //    mem_addr2 = 20;
    //    #(STEP*2);
    //    $finish();
    //end

    //always
    //begin
    //    #(STEP/2-1);
    //    $display(
    //        "%d ", mem_we1,
    //        "%d ", mem_addr1,
    //        "%d ", write_data1,
    //        "%d ", read_data1,
    //        "| ",
    //        "%d ", mem_we2,
    //        "%d ", mem_addr2,
    //        "%d ", write_data2,
    //        "%d ", read_data2,
    //    );
    //    #(STEP/2+1);
    //end

    initial
    begin
        #(STEP);
        mem_we1 = 0;
        #(STEP);
        mem_we1 = 1;
        mem_we2 = 0;
        write_data2 = 0;
        <%- for i in 0...32 -%>
        mem_addr1 = <%=i%>;
        <%- if i == 31 -%>
        mem_addr2 = 0;
        <%- else -%>
        mem_addr2 = <%=i+1%>;
        <%- end -%>
        write_data1 = <%=2*i%>;
        #(STEP);
        <%- end -%>
        <%- for i in 0...32 -%>
        mem_addr1 = <%=i%>;
        <%- if i == 31 -%>
        mem_addr2 = 0;
        <%- else -%>
        mem_addr2 = <%=i+1%>;
        <%- end -%>
        write_data1 = <%=4*i%>;
        #(STEP);
        <%- end -%>
        mem_we1 = 0;
        mem_addr1 = 1;
        write_data1 = 0;
        #(STEP);
        mem_addr1 = 10;
        mem_addr2 = 5;
        #(STEP*2);
        mem_addr1 = 31;
        mem_addr2 = 10;
        #(STEP*2);
        mem_addr1 = 100;
        mem_addr2 = 20;
        #(STEP*2);
        $finish();
    end

    always
    begin
        #(STEP/2-1);
        $display(
            "%d ", mem_we1,
            "%d ", mem_addr1,
            "%d ", write_data1,
            "%d ", read_data1,
            "| ",
            "%d ", mem_we2,
            "%d ", mem_addr2,
            "%d ", write_data2,
            "%d ", read_data2,
        );
        #(STEP/2+1);
    end

    /* rdpb18_64x16_g1 AUTO_TEMPLATE (
        .AA (mem_addr1[FACCUM-1:0]),
        .CPA (clk),
        .WEBA (1'b0),
        .REBA (1'b1),
        .OEBA (mem_we1),
        .CSBA (1'b0),
        .IA (write_data1[DWIDTH-1:0]),
        .OA (read_data1[DWIDTH-1:0]),
        .AB (mem_addr2[FACCUM-1:0]),
        .CPB (clk),
        .WEBB (1'b1),
        .REBB (1'b0),
        .OEBB (mem_we2),
        .CSBB (1'b0),
        .IB (write_data2[DWIDTH-1:0]),
        .OB (read_data2[DWIDTH-1:0]),
    ); */
    //rdpb18_64x16_g1 dut0(/*AUTOINST*/);

    renkon_mem_feat dut0(/*AUTOINST*/);

endmodule

// Local Variables:
// verilog-library-directories:("." "..")
// End:
