% load "gobou.rb"
// % weight = "/Users/pitchw0w/work/1.hw/bhewtek/data/mnist/lenet"
% weight = "/home/work/takau/bhewtek/data/mnist/lenet"

`timescale 1ns/1ps

module test_gobou();
`include "gobou.vh"

  /*AUTOREGINPUT*/
  reg [DWIDTH-1:0] mem_i [2**IMGSIZE-1:0];

  /*AUTOWIRE*/
  <%- for i in 0...$core -%>
  reg [DWIDTH-1:0] mem_n<%=i%> [2**NETSIZE-1:0];
  <%- end -%>

  //clock
  always
  begin
    clk = 0;
    #(STEP/2);
    clk = 1;
    #(STEP/2);
  end

  //flow
  integer i;
  initial
  begin
    xrst = 0;
    #(STEP);

    xrst = 1;
    req = 0;
    img_we = 0;
    input_addr = 0;
    output_addr = 0;
    write_img = 0;
    net_we = 0;
    net_addr = 0;
    write_net = 0;
    total_out = 0;
    total_in = 0;
    #(STEP);

    total_out = 500;
    total_in = 800;
    input_addr = 0;
    output_addr = 1000;
    read_input;
    read_weight;
    #(STEP);

    req = 1;
    #(STEP);
    req = 0;

    while(!ack) #(STEP);
    #(STEP*10);
    write_output;
    $finish();
  end

  gobou dut0(/*AUTOINST*/);

  task read_input;
    begin // {{{
      $readmemh(
        "test_gobou_input.dat",
        mem_i,
        0,
        799
      );
      img_we = 1;
        #(STEP);
      for (i=0; i<2**IMGSIZE; i=i+1)
      begin
        input_addr = i;
        #(STEP);
        write_img = mem_i[i];
        #(STEP);
      end
      #(STEP);
      img_we = 0;
      input_addr = 0;
      write_img = 0;
    end // }}}
  endtask

  task read_input_direct;
    begin // {{{
      $readmemh(
        "test_gobou_input.dat",
        dut0.mem_img.mem,
        0,
        799
      );
    end // }}}
  endtask

  task read_weight;
    begin // {{{
      <%- ($n_f1/$core).times do |i| -%>
      <%-   $core.times do |j| -%>
      $readmemb(
        "<%=weight%>/bwb_3/data<%=$core*i+j%>.bin",
        mem_n<%=j%>,
        <%=($n_in+1)*(i)%>,
        <%=($n_in+1)*(i+1)-1%>
      );
      <%-   end -%>
      <%- end -%>
      <%- if $n_f1 % $core != 0 -%>
      <%-   $core.times do |j| -%>
      <%-     if ($core*($n_f1/$core) + j) < $n_f1 -%>
      $readmemb(
        "<%=weight%>/bwb_3/data<%=$core*($n_f1/$core)+j%>.bin",
        mem_n<%=j%>,
        <%=($n_in+1)*($n_f1/$core)%>,
        <%=($n_in+1)*($n_f1/$core+1)-1%>
      );
      <%-     else -%>
      $readmemb(
        "<%=weight%>/bwb_3/null_net.bin",
        mem_n<%=j%>,
        <%=($n_in+1)*($n_f1/$core)%>,
        <%=($n_in+1)*($n_f1/$core+1)-1%>
      );
      <%-     end -%>
      <%-   end -%>
      <%- end -%>

      <%- for n in 0...$core -%>
      net_we = <%=$core_log+1%>'d<%=n+1%>;
      #(STEP);
      for (i=0; i<2**NETSIZE; i=i+1)
      begin
        net_addr = i;
        #(STEP);
        write_net = mem_n<%=n%>[i];
        #(STEP);
      end
      net_we = <%=$core_log+1%>'d0;
      net_addr = 0;
      write_net = 0;
      <%- end -%>
    end // }}}
  endtask

  task read_weight_direct;
    begin // {{{
      <%- ($n_f1/$core).times do |i| -%>
      <%-   $core.times do |j| -%>
      $readmemb(
        "<%=weight%>/bwb_3/data<%=$core*i+j%>.bin",
        dut0.mem_net<%=j%>.mem,
        <%=($n_in+1)*(i)%>,
        <%=($n_in+1)*(i+1)-1%>
      );
      <%-   end -%>
      <%- end -%>
      <%- if $n_f1 % $core != 0 -%>
      <%-   $core.times do |j| -%>
      <%-     if ($core*($n_f1/$core) + j) < $n_f1 -%>
      $readmemb(
        "<%=weight%>/bwb_3/data<%=$core*($n_f1/$core)+j%>.bin",
        dut0.mem_net<%=j%>.mem,
        <%=($n_in+1)*($n_f1/$core)%>,
        <%=($n_in+1)*($n_f1/$core+1)-1%>
      );
      <%-     else -%>
      $readmemb(
        "<%=weight%>/bwb_3/null_net.bin",
        dut0.mem_net<%=j%>.mem,
        <%=($n_in+1)*($n_f1/$core)%>,
        <%=($n_in+1)*($n_f1/$core+1)-1%>
      );
      <%-     end -%>
      <%-   end -%>
      <%- end -%>
    end // }}}
  endtask

  task write_output;
    integer fd;
    integer i;
    integer out_size;
    begin // {{{
      fd = $fopen("test_gobou.dat", "w");
      out_size = 500;
      for (i=1000; i<1000+out_size; i=i+1)
        $fdisplay(fd, "%0d", dut0.mem_img.mem[i]);
      $fclose(fd);
    end // }}}
  endtask

  //display
  always
  begin
    #(STEP/2-1);
    $display(
      "%5d: ", $time/STEP,
      "%d ", dut0.ctrl.ctrl_core.r_state,
      "| ",
      "%d ", clk,
      "%d ", xrst,
      "%d ", req,
      "%d ", img_we,
      "%3d ", input_addr,
      "%3d ", output_addr,
      "%d ", write_img,
      "%d ", net_we,
      "%3d ", net_addr,
      "%3d ", write_net,
      "%3d ", total_out,
      "%3d ", total_in,
      "| ",
      "%d ", ack,
      "%d ", read_img,
      "| ",
      "%d ", dut0.ctrl.out_core_valid,
      "%d ", dut0.ctrl.out_mac_valid,
      "%d ", dut0.ctrl.out_bias_valid,
      "%d ", dut0.ctrl.out_relu_valid,
      ": ",
      "%d ", dut0.core0.mac_oe,
      "%d ", dut0.core0.bias_oe,
      "%d ", dut0.core0.relu_oe,
      "%d ", dut0.serial_we,
      "| ",
      "%d ", dut0.mem_img_we,
      "%4d ", dut0.mem_img_addr,
      "%3d ", dut0.write_mem_img,
      "%3d ", dut0.write_result,
      "%d ", dut0.mem_img.mem[1000],
      "| ",
      "%d ", dut0.core0.accum_we,
      "%x ", dut0.core0.pixel,
      "%d ", dut0.core0.weight,
      "%d ", dut0.core0.bias.r_bias,
      "%d ", dut0.core0.dotted,
      "%d ", dut0.core0.biased,
      "%d ", dut0.core0.result,
      "%d ", dut0.serial.r_data0,
      "|"
    );
    #(STEP/2+1);
  end

endmodule
